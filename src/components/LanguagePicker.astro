---
import { languages, locales } from '~/i18n/ui';
import { getLangFromUrl } from '~/i18n/utils';
import { Icon } from 'astro-icon/components';

function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
const lang = getLangFromUrl(Astro.url);
const initLocale = new Intl.Locale(lang);
const initLang = capitalizeFirstLetter(new Intl.DisplayNames([lang], { type: 'language' }).of(initLocale.language));
export interface Props {
  id?: string;
  defaultLang?: string;
  flagSelector?: boolean;
}

const { id = 'language-picker', defaultLang = 'en', flagSelector = false } = Astro.props;
function getFlagSrc(countryCode) {
  if (countryCode === 'en') countryCode = 'us';
  return `https://flagsapi.com/${countryCode.toUpperCase()}/flat/32.png`;
}
---

{
  flagSelector ? (
    <div class="dropdown p-3" tabindex="0">
      <button id="dropdown-btn" class="dropdown-button">
        <img alt={`${lang} flag`} width="32" height="32" src={getFlagSrc(lang)} />
      </button>
      <ul class="dropdown-content bg-dark dark:bg-light dark:text-black text-white" id="dropdown-content">
        {locales
          .filter((loc) => loc !== lang)
          .map((locale) => {
            return (
              <li id={`locale-${locale}`} class="dropdown-list-item">
                <img alt={`${languages[locale]} flag`} src={getFlagSrc(locale)} class="w-6" />
              </li>
            );
          })}
      </ul>
    </div>
  ) : (
    <ul>
      {Object.entries(languages).map(([lang, label]) => (
        <li>
          <a href={`/${lang != 'en' ? lang : ''}`} class="no-underline">
            {label}
          </a>
        </li>
      ))}
    </ul>
  )
}

<script>
  const locales = ['en', 'fr', 'es', 'de'];

  function getFlagSrc(countryCode) {
    if (countryCode === 'en') countryCode = 'us';
    return `https://flagsapi.com/${countryCode.toUpperCase()}/flat/32.png`;
  }

  function setSelectedLocale(locale) {
    const intlLocale = new Intl.Locale(locale);
    const langName = new Intl.DisplayNames([locale], {
      type: 'language',
    }).of(intlLocale.language);

    const otherLocales = locales.filter((loc) => loc !== locale);
    otherLocales.forEach((otherLocale) => {
      const otherIntlLocale = new Intl.Locale(otherLocale);
      const otherLangName = new Intl.DisplayNames([otherLocale], {
        type: 'language',
      }).of(otherIntlLocale.language);
      const listEl = document.querySelector(`#locale-${otherLocale}`);
      listEl.addEventListener('mousedown', function () {
        window.location.href = `/${otherLocale !== 'en' ? otherLocale : ''}`;
      });
    });
  }
  setSelectedLocale(window.location.pathname.split('/')[1] || locales[0]);
</script>

<style>
  .dropdown-button {
    @apply w-max p-1 items-center justify-center rounded-md text-base cursor-pointer border hover:bg-gray-100 ease-in duration-200 dark:border-slate-500 dark:hover:bg-slate-800 dark:hover:border-slate-800;
  }

  .dropdown-button img {
    @apply mx-1.5;
  }

  .dropdown-content li img,
  .dropdown button img {
    @apply w-6;
  }

  .dropdown button,
  .dropdown-content li {
    @apply flex justify-center items-center text-sm font-medium;
  }

  .dropdown-content {
    @apply absolute hidden rounded-lg shadow-lg z-10 max-h-80;
  }

  .dropdown-content li {
    @apply no-underline p-1 w-max hover:bg-gray-700  dark:hover:bg-gray-200 flex items-center;
  }

  .dropdown-content li img {
    @apply mx-1.5;
  }

  .dropdown-content li:hover {
    @apply cursor-pointer rounded-md;
  }

  .dropdown:focus-within .dropdown-content {
    @apply block;
  }

  /* Custom animation for dropdown-content */
  @-webkit-keyframes slideIn {
    from {
      opacity: 0;
      -webkit-transform: translateY(-10px);
    }
    to {
      opacity: 1;
      -webkit-transform: translateY(0);
    }
  }

  .dropdown-content {
    -webkit-animation: slideIn 0.3s ease-out;
    animation: slideIn 0.3s ease-out;
  }
</style>
